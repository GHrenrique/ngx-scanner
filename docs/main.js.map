{"version":3,"file":"main.js","mappings":"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","sources":["./projects/zxing-scanner-demo/src/app/app-info-dialog/app-info-dialog.component.ts","./projects/zxing-scanner-demo/src/app/app-info-dialog/app-info-dialog.component.html","./projects/zxing-scanner-demo/src/app/app-info/app-info.component.ts","./projects/zxing-scanner-demo/src/app/app-info/app-info.component.html","./projects/zxing-scanner-demo/src/app/app-ui.module.ts","./projects/zxing-scanner-demo/src/app/app.component.ts","./projects/zxing-scanner-demo/src/app/app.component.html","./projects/zxing-scanner-demo/src/app/app.module.ts","./projects/zxing-scanner-demo/src/app/barcode-formats.ts","./projects/zxing-scanner-demo/src/app/formats-dialog/formats-dialog.component.ts","./projects/zxing-scanner-demo/src/app/formats-dialog/formats-dialog.component.html","./projects/zxing-scanner-demo/src/app/public_api.ts","./projects/zxing-scanner-demo/src/environments/environment.ts","./projects/zxing-scanner-demo/src/main.ts","./projects/zxing-scanner/src/lib/browser-multi-format-continuous-reader.ts","./projects/zxing-scanner/src/lib/zxing-scanner.component.ts","./projects/zxing-scanner/src/lib/zxing-scanner.component.html","./projects/zxing-scanner/src/lib/zxing-scanner.module.ts","./projects/zxing-scanner/src/public_api.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\r\n\r\n@Component({\r\n  selector: 'app-info-dialog',\r\n  templateUrl: './app-info-dialog.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppInfoDialogComponent {\r\n\r\n  hasDevices: boolean;\r\n  hasPermission: boolean;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\r\n  ) {\r\n    this.hasDevices = data.hasDevices;\r\n    this.hasPermission = data.hasPermission;\r\n  }\r\n\r\n}\r\n","<app-info [hasDevices]=\"hasDevices\" [hasPermission]=\"hasPermission\"></app-info>\r\n\r\n<mat-dialog-actions>\r\n  <button mat-flat-button color=\"primary\" mat-dialog-close>Done</button>\r\n</mat-dialog-actions>\r\n","import { Component, Input, VERSION, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-info',\r\n  templateUrl: './app-info.component.html',\r\n  styleUrls: ['./app-info.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppInfoComponent {\r\n\r\n  ngVersion = VERSION.full;\r\n\r\n  @Input()\r\n  hasDevices: boolean;\r\n\r\n  @Input()\r\n  hasPermission: boolean;\r\n\r\n  stateToEmoji(state: boolean): string {\r\n\r\n    const states = {\r\n      // not checked\r\n      undefined: '❔',\r\n      // failed to check\r\n      null: '⭕',\r\n      // success\r\n      true: '✔',\r\n      // can't touch that\r\n      false: '❌'\r\n    };\r\n\r\n    return states['' + state];\r\n  }\r\n}\r\n","<table class=\"table-scanner-state\">\r\n  <thead>\r\n    <tr>\r\n      <th>Status</th>\r\n      <th>Property</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td><code>{{ stateToEmoji(hasDevices) }}</code></td>\r\n      <td>Devices</td>\r\n    </tr>\r\n    <tr>\r\n      <td><code>{{ stateToEmoji(hasPermission) }}</code></td>\r\n      <td>Permissions</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p matLine class=\"ng-version\">Angular version: {{ ngVersion }}</p>\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatLegacyButtonModule as MatButtonModule } from '@angular/material/legacy-button';\r\nimport { MatLegacyDialogModule as MatDialogModule } from '@angular/material/legacy-dialog';\r\nimport { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\r\nimport { MatLegacyListModule as MatListModule } from '@angular/material/legacy-list';\r\nimport { MatLegacyMenuModule as MatMenuModule } from '@angular/material/legacy-menu';\r\nimport { MatLegacySelectModule as MatSelectModule } from '@angular/material/legacy-select';\r\nimport { MatLegacyTooltipModule as MatTooltipModule } from '@angular/material/legacy-tooltip';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ZXingScannerModule } from './public_api';\r\n\r\nconst UI_MODULES = [\r\n\r\n  // Angular\r\n  BrowserAnimationsModule,\r\n  FormsModule,\r\n\r\n  // Material\r\n  MatDialogModule,\r\n  MatListModule,\r\n  MatTooltipModule,\r\n  MatButtonModule,\r\n  MatFormFieldModule,\r\n  MatSelectModule,\r\n  MatInputModule,\r\n  MatMenuModule,\r\n  MatIconModule,\r\n\r\n  // Local\r\n  ZXingScannerModule,\r\n\r\n];\r\n\r\n@NgModule({ exports: UI_MODULES })\r\nexport class AppUiModule { }\r\n","import { Component } from '@angular/core';\r\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\r\nimport { BarcodeFormat } from '@zxing/library';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\r\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  availableDevices: MediaDeviceInfo[];\r\n  deviceCurrent: MediaDeviceInfo;\r\n  deviceSelected: string;\r\n\r\n  formatsEnabled: BarcodeFormat[] = [\r\n    BarcodeFormat.CODE_128,\r\n    BarcodeFormat.DATA_MATRIX,\r\n    BarcodeFormat.EAN_13,\r\n    BarcodeFormat.QR_CODE,\r\n  ];\r\n\r\n  hasDevices: boolean;\r\n  hasPermission: boolean;\r\n\r\n  qrResultString: string;\r\n\r\n  torchEnabled = false;\r\n  torchAvailable$ = new BehaviorSubject<boolean>(false);\r\n  tryHarder = false;\r\n\r\n  constructor(private readonly _dialog: MatDialog) { }\r\n\r\n  clearResult(): void {\r\n    this.qrResultString = null;\r\n  }\r\n\r\n  onCamerasFound(devices: MediaDeviceInfo[]): void {\r\n    this.availableDevices = devices;\r\n    this.hasDevices = Boolean(devices && devices.length);\r\n  }\r\n\r\n  onCodeResult(resultString: string) {\r\n    this.qrResultString = resultString;\r\n  }\r\n\r\n  onDeviceSelectChange(selected: string) {\r\n    const selectedStr = selected || '';\r\n    if (this.deviceSelected === selectedStr) { return; }\r\n    this.deviceSelected = selectedStr;\r\n    const device = this.availableDevices.find(x => x.deviceId === selected);\r\n    this.deviceCurrent = device || undefined;\r\n  }\r\n\r\n  onDeviceChange(device: MediaDeviceInfo) {\r\n    const selectedStr = device?.deviceId || '';\r\n    if (this.deviceSelected === selectedStr) { return; }\r\n    this.deviceSelected = selectedStr;\r\n    this.deviceCurrent = device || undefined;\r\n  }\r\n\r\n  openFormatsDialog() {\r\n    const data = {\r\n      formatsEnabled: this.formatsEnabled,\r\n    };\r\n\r\n    this._dialog\r\n      .open(FormatsDialogComponent, { data })\r\n      .afterClosed()\r\n      .subscribe(x => {\r\n        if (x) {\r\n          this.formatsEnabled = x;\r\n        }\r\n      });\r\n  }\r\n\r\n  onHasPermission(has: boolean) {\r\n    this.hasPermission = has;\r\n  }\r\n\r\n  openInfoDialog() {\r\n    const data = {\r\n      hasDevices: this.hasDevices,\r\n      hasPermission: this.hasPermission,\r\n    };\r\n\r\n    this._dialog.open(AppInfoDialogComponent, { data });\r\n  }\r\n\r\n  onTorchCompatible(isCompatible: boolean): void {\r\n    this.torchAvailable$.next(isCompatible || false);\r\n  }\r\n\r\n  toggleTorch(): void {\r\n    this.torchEnabled = !this.torchEnabled;\r\n  }\r\n\r\n  toggleTryHarder(): void {\r\n    this.tryHarder = !this.tryHarder;\r\n  }\r\n}\r\n","<div class=\"scanner-shell\" [hidden]=\"!hasDevices\">\r\n\r\n  <mat-menu #appMenu=\"matMenu\">\r\n    <mat-selection-list>\r\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTryHarder()\" [selected]=\"tryHarder\">\r\n        Enable Try-harder\r\n      </mat-list-option>\r\n      <mat-list-option checkboxPosition=\"start\" (click)=\"toggleTorch()\" [selected]=\"torchEnabled\"\r\n        *ngIf=\"torchAvailable$ | async\">\r\n        Enable Torch\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n    <mat-divider></mat-divider>\r\n    <button mat-menu-item (click)=\"openFormatsDialog()\">Barcode formats</button>\r\n    <button mat-menu-item (click)=\"openInfoDialog()\">App info</button>\r\n  </mat-menu>\r\n\r\n  <header>\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-select [value]=\"deviceSelected\" (valueChange)=\"onDeviceSelectChange($event)\">\r\n        <mat-option value=\"\">No Device Selected</mat-option>\r\n        <mat-option *ngFor=\"let device of availableDevices\" [value]=\"device.deviceId\">{{device.label}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\r\n      <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n  </header>\r\n\r\n  <zxing-scanner [torch]=\"torchEnabled\" [device]=\"deviceCurrent\" (deviceChange)=\"onDeviceChange($event)\" (scanSuccess)=\"onCodeResult($event)\"\r\n    [formats]=\"formatsEnabled\" [tryHarder]=\"tryHarder\" (permissionResponse)=\"onHasPermission($event)\"\r\n    (camerasFound)=\"onCamerasFound($event)\" (torchCompatible)=\"onTorchCompatible($event)\"></zxing-scanner>\r\n\r\n  <section class=\"results\" *ngIf=\"qrResultString\">\r\n    <div>\r\n      <small>teste</small>\r\n      <strong>{{ qrResultString }}</strong>\r\n    </div>\r\n    <button mat-icon-button (click)=\"clearResult()\">&times;</button>\r\n  </section>\r\n\r\n</div>\r\n\r\n<ng-container *ngIf=\"hasPermission === undefined\">\r\n\r\n  <h2>Waiting for permissions.</h2>\r\n\r\n  <blockquote>\r\n    If your device does not has cameras, no permissions will be asked.\r\n  </blockquote>\r\n\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"hasPermission === false\">\r\n\r\n  <h2>You denied the camera permission, we can't scan anything without it. 😪</h2>\r\n\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"hasDevices === undefined\">\r\n\r\n  <h2>Couldn't check for devices.</h2>\r\n\r\n  <blockquote>\r\n    This may be caused by some security error.\r\n  </blockquote>\r\n\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"hasDevices === false\">\r\n\r\n  <h2>No devices were found.</h2>\r\n\r\n  <blockquote>\r\n    I believe your device has no media devices attached to.\r\n  </blockquote>\r\n\r\n</ng-container>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { ServiceWorkerModule } from '@angular/service-worker';\r\nimport { environment } from '../environments/environment';\r\nimport { AppInfoDialogComponent } from './app-info-dialog/app-info-dialog.component';\r\nimport { AppInfoComponent } from './app-info/app-info.component';\r\nimport { AppUiModule } from './app-ui.module';\r\nimport { AppComponent } from './app.component';\r\nimport { FormatsDialogComponent } from './formats-dialog/formats-dialog.component';\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        // Angular\r\n        BrowserModule,\r\n        ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\r\n        // Local\r\n        AppUiModule,\r\n    ],\r\n    declarations: [AppComponent, FormatsDialogComponent, AppInfoComponent, AppInfoDialogComponent],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { BarcodeFormat } from '@zxing/library';\r\n\r\nexport const formatsAvailable = [\r\n  BarcodeFormat.AZTEC,\r\n  BarcodeFormat.CODE_39,\r\n  BarcodeFormat.CODE_128,\r\n  BarcodeFormat.DATA_MATRIX,\r\n  BarcodeFormat.EAN_13,\r\n  BarcodeFormat.EAN_8,\r\n  BarcodeFormat.ITF,\r\n  BarcodeFormat.QR_CODE,\r\n  BarcodeFormat.PDF_417,\r\n  BarcodeFormat.RSS_14,\r\n];\r\n\r\nexport const formatNames = [\r\n  'Aztec 2D barcode format.',\r\n  'CODABAR 1D format.',\r\n  'Code 39 1D format.',\r\n  'Code 93 1D format.',\r\n  'Code 128 1D format.',\r\n  'Data Matrix 2D barcode format.',\r\n  'EAN-8 1D format.',\r\n  'EAN-13 1D format.',\r\n  'ITF (Interleaved Two of Five) 1D format.',\r\n  'MaxiCode 2D barcode format.',\r\n  'PDF417 format.',\r\n  'QR Code 2D barcode format.',\r\n  'RSS 14',\r\n  'RSS EXPANDED',\r\n  'UPC-A 1D format.',\r\n  'UPC-E 1D format.',\r\n  'UPC/EAN extension format. Not a stand-alone format.',\r\n];\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatLegacyDialogRef as MatDialogRef, MAT_LEGACY_DIALOG_DATA as MAT_DIALOG_DATA } from '@angular/material/legacy-dialog';\r\nimport { MatLegacySelectionListChange as MatSelectionListChange } from '@angular/material/legacy-list';\r\nimport { BarcodeFormat } from '@zxing/library';\r\nimport { formatNames, formatsAvailable } from '../barcode-formats';\r\n\r\n@Component({\r\n  selector: 'app-formats-dialog',\r\n  templateUrl: './formats-dialog.component.html',\r\n  styleUrls: ['./formats-dialog.component.scss']\r\n})\r\nexport class FormatsDialogComponent {\r\n\r\n  formatsAvailable = formatsAvailable;\r\n\r\n  formatsEnabled: BarcodeFormat[];\r\n\r\n  readonly formatNames = formatNames;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) readonly data: any,\r\n    private readonly _dialogRef: MatDialogRef<FormatsDialogComponent>,\r\n  ) {\r\n    this.formatsEnabled = data.formatsEnabled || [];\r\n  }\r\n\r\n  close() {\r\n    this._dialogRef.close(this.formatsEnabled);\r\n  }\r\n\r\n  isEnabled(format: BarcodeFormat) {\r\n    return this.formatsEnabled.find(x => x === format);\r\n  }\r\n\r\n  onSelectionChange(event: MatSelectionListChange) {\r\n    this.formatsEnabled = event.source.selectedOptions.selected.map(selected => selected.value);\r\n  }\r\n}\r\n","<header>\r\n  Available formats:\r\n</header>\r\n\r\n<mat-selection-list #selectedFormats (selectionChange)=\"onSelectionChange($event)\">\r\n  <mat-list-option *ngFor=\"let format of formatsAvailable\" checkboxPosition=\"start\" [selected]=\"isEnabled(format)\" [value]=\"format\">\r\n    {{ formatNames[format] }}\r\n  </mat-list-option>\r\n</mat-selection-list>\r\n\r\n<mat-dialog-actions>\r\n  <button mat-flat-button color=\"primary\" (click)=\"close()\">Done</button>\r\n</mat-dialog-actions>\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from '../../../zxing-scanner/src/public_api';\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","import { ChecksumException, FormatException, NotFoundException } from '@zxing/library';\r\nimport { BrowserMultiFormatReader, IScannerControls } from '@zxing/browser';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n/**\r\n * Based on zxing-typescript BrowserCodeReader\r\n */\r\nexport class BrowserMultiFormatContinuousReader extends BrowserMultiFormatReader {\r\n\r\n  /**\r\n   * Allows to call scanner controls API while scanning.\r\n   * Will be undefined if no scanning is running.\r\n   */\r\n  protected scannerControls: IScannerControls;\r\n\r\n  /**\r\n   * Returns the code reader scanner controls.\r\n   */\r\n  public getScannerControls(): IScannerControls {\r\n    if (!this.scannerControls) {\r\n      throw new Error('No scanning is running at the time.');\r\n    }\r\n    return this.scannerControls;\r\n  }\r\n\r\n  /**\r\n   * Starts the decoding from the current or a new video element.\r\n   *\r\n   * @param deviceId The device's to be used Id\r\n   * @param previewEl A new video element\r\n   */\r\n  public async scanFromDeviceObservable(\r\n    deviceId?: string,\r\n    previewEl?: HTMLVideoElement\r\n  ): Promise<Observable<ResultAndError>> {\r\n\r\n    const scan$ = new BehaviorSubject<ResultAndError>({});\r\n    let ctrls;\r\n\r\n    try {\r\n      ctrls = await this.decodeFromVideoDevice(deviceId, previewEl, (result, error) => {\r\n\r\n        if (!error) {\r\n          scan$.next({ result });\r\n          return;\r\n        }\r\n\r\n        const errorName = error.name;\r\n\r\n        // stream cannot stop on fails.\r\n        if (\r\n          // scan Failure - found nothing, no error\r\n          errorName === NotFoundException.name ||\r\n          // scan Error - found the QR but got error on decoding\r\n          errorName === ChecksumException.name ||\r\n          errorName === FormatException.name ||\r\n          error.message.includes('No MultiFormat Readers were able to detect the code.')\r\n        ) {\r\n          scan$.next({ error });\r\n          return;\r\n        }\r\n\r\n        // probably fatal error\r\n        scan$.error(error);\r\n        this.scannerControls.stop();\r\n        this.scannerControls = undefined;\r\n        return;\r\n      });\r\n\r\n      this.scannerControls = {\r\n        ...ctrls,\r\n        stop() {\r\n          ctrls.stop();\r\n          scan$.complete();\r\n        },\r\n      };\r\n    } catch (e) {\r\n      scan$.error(e);\r\n      this.scannerControls?.stop();\r\n      this.scannerControls = undefined;\r\n    }\r\n\r\n    return scan$.asObservable();\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { BrowserCodeReader } from '@zxing/browser';\r\nimport {\r\n  BarcodeFormat,\r\n  DecodeHintType,\r\n  Exception,\r\n  Result\r\n} from '@zxing/library';\r\nimport { Subscription } from 'rxjs';\r\nimport { BrowserMultiFormatContinuousReader } from './browser-multi-format-continuous-reader';\r\nimport { ResultAndError } from './ResultAndError';\r\n\r\n\r\n@Component({\r\n  selector: 'zxing-scanner',\r\n  templateUrl: './zxing-scanner.component.html',\r\n  styleUrls: ['./zxing-scanner.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ZXingScannerComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Supported Hints map.\r\n   */\r\n  private _hints: Map<DecodeHintType, any> | null;\r\n\r\n  /**\r\n   * The ZXing code reader.\r\n   */\r\n  private _codeReader: BrowserMultiFormatContinuousReader;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _device: MediaDeviceInfo;\r\n\r\n  /**\r\n   * The device that should be used to scan things.\r\n   */\r\n  private _enabled: boolean;\r\n\r\n  /**\r\n   *\r\n   */\r\n  private _isAutostarting: boolean;\r\n\r\n  /**\r\n   * Has `navigator` access.\r\n   */\r\n  private hasNavigator: boolean;\r\n\r\n  /**\r\n   * Says if some native API is supported.\r\n   */\r\n  private isMediaDevicesSupported: boolean;\r\n\r\n  /**\r\n   * If the user-agent allowed the use of the camera or not.\r\n   */\r\n  private hasPermission: boolean | null;\r\n\r\n  /**\r\n   * Unsubscribe to stop scanning.\r\n   */\r\n  private _scanSubscription?: Subscription;\r\n\r\n  /**\r\n   * Reference to the preview element, should be the `video` tag.\r\n   */\r\n  @ViewChild('preview', { static: true })\r\n  previewElemRef: ElementRef<HTMLVideoElement>;\r\n\r\n  /**\r\n   * Enable or disable autofocus of the camera (might have an impact on performance)\r\n   */\r\n  @Input()\r\n  autofocusEnabled: boolean;\r\n\r\n  /**\r\n   * Delay between attempts to decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  timeBetweenScans = 500;\r\n\r\n  /**\r\n   * Delay between successful decode (default is 500ms)\r\n   */\r\n  @Input()\r\n  delayBetweenScanSuccess = 500;\r\n\r\n  /**\r\n   * Emits when and if the scanner is autostarted.\r\n   */\r\n  @Output()\r\n  autostarted: EventEmitter<void>;\r\n\r\n  /**\r\n   * True during autostart and false after. It will be null if won't autostart at all.\r\n   */\r\n  @Output()\r\n  autostarting: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * If the scanner should autostart with the first available device.\r\n   */\r\n  @Input()\r\n  autostart: boolean;\r\n\r\n  /**\r\n   * How the preview element should be fit inside the :host container.\r\n   */\r\n  @Input()\r\n  previewFitMode: 'fill' | 'contain' | 'cover' | 'scale-down' | 'none' = 'cover';\r\n\r\n  /**\r\n   * Emits events when the torch compatibility is changed.\r\n   */\r\n  @Output()\r\n  torchCompatible: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emits events when a scan is successful performed, will inject the string value of the QR-code to the callback.\r\n   */\r\n  @Output()\r\n  scanSuccess: EventEmitter<string>;\r\n\r\n  /**\r\n   * Emits events when a scan fails without errors, useful to know how much scan tries where made.\r\n   */\r\n  @Output()\r\n  scanFailure: EventEmitter<Exception | undefined>;\r\n\r\n  /**\r\n   * Emits events when a scan throws some error, will inject the error to the callback.\r\n   */\r\n  @Output()\r\n  scanError: EventEmitter<Error>;\r\n\r\n  /**\r\n   * Emits events when a scan is performed, will inject the Result value of the QR-code scan (if available) to the callback.\r\n   */\r\n  @Output()\r\n  scanComplete: EventEmitter<Result>;\r\n\r\n  /**\r\n   * Emits events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasFound: EventEmitter<MediaDeviceInfo[]>;\r\n\r\n  /**\r\n   * Emits events when no cameras are found, will inject an exception (if available) to the callback.\r\n   */\r\n  @Output()\r\n  camerasNotFound: EventEmitter<any>;\r\n\r\n  /**\r\n   * Emits events when the users answers for permission.\r\n   */\r\n  @Output()\r\n  permissionResponse: EventEmitter<boolean>;\r\n\r\n  /**\r\n   * Emits events when has devices status is update.\r\n   */\r\n  @Output()\r\n  hasDevices: EventEmitter<boolean>;\r\n\r\n  private _ready = false;\r\n\r\n  private _devicePreStart: MediaDeviceInfo;\r\n\r\n  /**\r\n   * Exposes the current code reader, so the user can use it's APIs.\r\n   */\r\n  get codeReader(): BrowserMultiFormatContinuousReader {\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * User device input\r\n   */\r\n  @Input()\r\n  set device(device: MediaDeviceInfo | undefined) {\r\n\r\n    if (!this._ready) {\r\n      this._devicePreStart = device;\r\n      // let's ignore silently, users don't like logs\r\n      return;\r\n    }\r\n\r\n    if (this.isAutostarting) {\r\n      // do not allow setting devices during auto-start, since it will set one and emit it.\r\n      console.warn('Avoid setting a device during auto-start.');\r\n      return;\r\n    }\r\n\r\n    if (this.isCurrentDevice(device)) {\r\n      console.warn('Setting the same device is not allowed.');\r\n      return;\r\n    }\r\n\r\n    if (!this.hasPermission) {\r\n      console.warn('Permissions not set yet, waiting for them to be set to apply device change.');\r\n      // this.permissionResponse\r\n      //   .pipe(\r\n      //     take(1),\r\n      //     tap(() => console.log(`Permissions set, applying device change${device ? ` (${device.deviceId})` : ''}.`))\r\n      //   )\r\n      //   .subscribe(() => this.device = device);\r\n      return;\r\n    }\r\n\r\n    this.setDevice(device);\r\n  }\r\n\r\n  /**\r\n   * Emits when the current device is changed.\r\n   */\r\n  @Output()\r\n  deviceChange: EventEmitter<MediaDeviceInfo>;\r\n\r\n  /**\r\n   * User device accessor.\r\n   */\r\n  get device() {\r\n    return this._device;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered formats.\r\n   */\r\n  get formats(): BarcodeFormat[] {\r\n    return this.hints.get(DecodeHintType.POSSIBLE_FORMATS);\r\n  }\r\n\r\n  /**\r\n   * Registers formats the scanner should support.\r\n   *\r\n   * @param input BarcodeFormat or case-insensitive string array.\r\n   */\r\n  @Input()\r\n  set formats(input: BarcodeFormat[]) {\r\n\r\n    if (typeof input === 'string') {\r\n      throw new Error('Invalid formats, make sure the [formats] input is a binding.');\r\n    }\r\n\r\n    // formats may be set from html template as BarcodeFormat or string array\r\n    const formats = input.map(f => this.getBarcodeFormatOrFail(f));\r\n\r\n    const hints = this.hints;\r\n\r\n    // updates the hints\r\n    hints.set(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\r\n    // handles updating the codeReader\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Returns all the registered hints.\r\n   */\r\n  get hints() {\r\n    return this._hints;\r\n  }\r\n\r\n  /**\r\n   * Does what it takes to set the hints.\r\n   */\r\n  set hints(hints: Map<DecodeHintType, any>) {\r\n    this._hints = hints;\r\n    // new instance with new hints.\r\n    this.codeReader?.setHints(this._hints);\r\n  }\r\n\r\n  /**\r\n   * Sets the desired constraints in all video tracks.\r\n   * @experimental\r\n   */\r\n  @Input()\r\n  set videoConstraints(constraints: MediaTrackConstraints) {\r\n    // new instance with new hints.\r\n    const controls = this.codeReader?.getScannerControls();\r\n\r\n    if (!controls) {\r\n      // fails silently\r\n      return;\r\n    }\r\n\r\n    controls?.streamVideoConstraintsApply(constraints);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  set isAutostarting(state: boolean) {\r\n    this._isAutostarting = state;\r\n    this.autostarting.next(state);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  get isAutostarting(): boolean {\r\n    return this._isAutostarting;\r\n  }\r\n\r\n  /**\r\n   * Can turn on/off the device flashlight.\r\n   *\r\n   * @experimental Torch/Flash APIs are not stable in all browsers, it may be buggy!\r\n   */\r\n  @Input()\r\n  set torch(onOff: boolean) {\r\n    try {\r\n      const controls = this.getCodeReader().getScannerControls();\r\n      controls.switchTorch(onOff);\r\n    } catch (error) {\r\n      // ignore error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts and Stops the scanning.\r\n   */\r\n  @Input()\r\n  set enable(enabled: boolean) {\r\n\r\n    this._enabled = Boolean(enabled);\r\n\r\n    if (!this._enabled) {\r\n      this.reset();\r\n      BrowserMultiFormatContinuousReader.releaseAllStreams();\r\n    } else {\r\n      if (this.device) {\r\n        this.scanFromDevice(this.device.deviceId);\r\n      } else {\r\n        this.init();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells if the scanner is enabled or not.\r\n   */\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  /**\r\n   * If is `tryHarder` enabled.\r\n   */\r\n  get tryHarder(): boolean {\r\n    return this.hints.get(DecodeHintType.TRY_HARDER);\r\n  }\r\n\r\n  /**\r\n   * Enable/disable tryHarder hint.\r\n   */\r\n  @Input()\r\n  set tryHarder(enable: boolean) {\r\n\r\n    const hints = this.hints;\r\n\r\n    if (enable) {\r\n      hints.set(DecodeHintType.TRY_HARDER, true);\r\n    } else {\r\n      hints.delete(DecodeHintType.TRY_HARDER);\r\n    }\r\n\r\n    this.hints = hints;\r\n  }\r\n\r\n  /**\r\n   * Constructor to build the object and do some DI.\r\n   */\r\n  constructor() {\r\n    // instance based emitters\r\n    this.autostarted = new EventEmitter();\r\n    this.autostarting = new EventEmitter();\r\n    this.torchCompatible = new EventEmitter(false);\r\n    this.scanSuccess = new EventEmitter();\r\n    this.scanFailure = new EventEmitter();\r\n    this.scanError = new EventEmitter();\r\n    this.scanComplete = new EventEmitter();\r\n    this.camerasFound = new EventEmitter();\r\n    this.camerasNotFound = new EventEmitter();\r\n    this.permissionResponse = new EventEmitter(true);\r\n    this.hasDevices = new EventEmitter();\r\n    this.deviceChange = new EventEmitter();\r\n\r\n    this._enabled = true;\r\n    this._hints = new Map<DecodeHintType, any>();\r\n    this.autofocusEnabled = true;\r\n    this.autostart = true;\r\n    this.formats = [BarcodeFormat.QR_CODE];\r\n\r\n    // computed data\r\n    this.hasNavigator = typeof navigator !== 'undefined';\r\n    this.isMediaDevicesSupported = this.hasNavigator && !!navigator.mediaDevices;\r\n  }\r\n\r\n  /**\r\n   * Gets and registers all cameras.\r\n   */\r\n  async askForPermission(): Promise<boolean> {\r\n\r\n    if (!this.hasNavigator) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t ask permission, navigator is not present.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    if (!this.isMediaDevicesSupported) {\r\n      console.error('@zxing/ngx-scanner', 'Can\\'t get user media, this is not supported.');\r\n      this.setPermission(null);\r\n      return this.hasPermission;\r\n    }\r\n\r\n    let stream: MediaStream;\r\n    let permission: boolean;\r\n\r\n    try {\r\n      // Will try to ask for permission\r\n      stream = await this.getAnyVideoDevice();\r\n      permission = !!stream;\r\n    } catch (err) {\r\n      return this.handlePermissionException(err);\r\n    } finally {\r\n      this.terminateStream(stream);\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // Returns the permission\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  getAnyVideoDevice(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({ video: true });\r\n  }\r\n\r\n  /**\r\n   * Terminates a stream and it's tracks.\r\n   */\r\n  private terminateStream(stream: MediaStream) {\r\n\r\n    if (stream) {\r\n      stream.getTracks().forEach(t => t.stop());\r\n    }\r\n\r\n    stream = undefined;\r\n  }\r\n\r\n  private async init() {\r\n    if (!this.autostart) {\r\n      console.warn('Feature \\'autostart\\' disabled. Permissions and devices recovery has to be run manually.');\r\n\r\n      // does the necessary configuration without autostarting\r\n      this.initAutostartOff();\r\n\r\n      this._ready = true;\r\n\r\n      return;\r\n    }\r\n\r\n    // configures the component and starts the scanner\r\n    await this.initAutostartOn();\r\n\r\n    this._ready = true;\r\n  }\r\n\r\n  /**\r\n   * Initializes the component without starting the scanner.\r\n   */\r\n  private initAutostartOff(): void {\r\n\r\n    // do not ask for permission when autostart is off\r\n    this.isAutostarting = false;\r\n\r\n    // just update devices information\r\n    this.updateVideoInputDevices();\r\n\r\n    if (this._device && this._devicePreStart) {\r\n      this.setDevice(this._devicePreStart);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the component and starts the scanner.\r\n   * Permissions are asked to accomplish that.\r\n   */\r\n  private async initAutostartOn(): Promise<void> {\r\n\r\n    this.isAutostarting = true;\r\n\r\n    let hasPermission: boolean;\r\n\r\n    try {\r\n      // Asks for permission before enumerating devices so it can get all the device's info\r\n      hasPermission = await this.askForPermission();\r\n    } catch (e) {\r\n      console.error('Exception occurred while asking for permission:', e);\r\n      return;\r\n    }\r\n\r\n    // from this point, things gonna need permissions\r\n    if (hasPermission) {\r\n      const devices = await this.updateVideoInputDevices();\r\n      await this.autostartScanner([...devices]);\r\n    }\r\n\r\n    this.isAutostarting = false;\r\n    this.autostarted.next();\r\n  }\r\n\r\n  /**\r\n   * Checks if the given device is the current defined one.\r\n   */\r\n  isCurrentDevice(device?: MediaDeviceInfo) {\r\n    return device?.deviceId === this._device?.deviceId;\r\n  }\r\n\r\n  /**\r\n   * Executes some actions before destroy the component.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.reset();\r\n    BrowserMultiFormatContinuousReader.releaseAllStreams();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  ngOnInit(): void {\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStop() {\r\n    if (this._scanSubscription) {\r\n      this.codeReader?.getScannerControls().stop();\r\n      this._scanSubscription?.unsubscribe();\r\n      this._scanSubscription = undefined;\r\n    }\r\n    this.torchCompatible.next(false);\r\n  }\r\n\r\n  /**\r\n   * Stops the scanning, if any.\r\n   */\r\n  public scanStart() {\r\n\r\n    if (this._scanSubscription) {\r\n      throw new Error('There is already a scan process running.');\r\n    }\r\n\r\n    if (!this._device) {\r\n      throw new Error('No device defined, cannot start scan, please define a device.');\r\n    }\r\n\r\n    this.scanFromDevice(this._device.deviceId);\r\n  }\r\n\r\n  /**\r\n   * Stops old `codeReader` and starts scanning in a new one.\r\n   */\r\n  restart(): void {\r\n    // note only necessary for now because of the Torch\r\n    this._codeReader = undefined;\r\n\r\n    const prevDevice = this._reset();\r\n\r\n    if (!prevDevice) {\r\n      return;\r\n    }\r\n\r\n    this.device = prevDevice;\r\n  }\r\n\r\n  /**\r\n   * Discovers and updates known video input devices.\r\n   */\r\n  async updateVideoInputDevices(): Promise<MediaDeviceInfo[]> {\r\n\r\n    // permissions aren't needed to get devices, but to access them and their info\r\n    const devices = await BrowserCodeReader.listVideoInputDevices() || [];\r\n    const hasDevices = devices && devices.length > 0;\r\n\r\n    // stores discovered devices and updates information\r\n    this.hasDevices.next(hasDevices);\r\n    this.camerasFound.next([...devices]);\r\n\r\n    if (!hasDevices) {\r\n      this.camerasNotFound.next(null);\r\n    }\r\n\r\n    return devices;\r\n  }\r\n\r\n  /**\r\n   * Starts the scanner with the back camera otherwise take the last\r\n   * available device.\r\n   */\r\n  private async autostartScanner(devices: MediaDeviceInfo[]): Promise<void> {\r\n\r\n    const matcher = ({ label }) => /back|trás|rear|traseira|environment|ambiente/gi.test(label);\r\n\r\n    // select the rear camera by default, otherwise take the last camera.\r\n    const device = devices.find(matcher) || devices.pop();\r\n\r\n    if (!device) {\r\n      throw new Error('Impossible to autostart, no input devices available.');\r\n    }\r\n\r\n    await this.setDevice(device);\r\n\r\n    this.deviceChange.next(device);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan success event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanSuccess(result: Result): void {\r\n    this.scanSuccess.next(result.getText());\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan failure event.\r\n   */\r\n  private dispatchScanFailure(reason?: Exception): void {\r\n    this.scanFailure.next(reason);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan error event.\r\n   *\r\n   * @param error the error thing.\r\n   */\r\n  private dispatchScanError(error: any): void {\r\n    if (!this.scanError.observed) {\r\n      console.error(`zxing scanner component: ${error.name}`, error);\r\n      console.warn('Use the `(scanError)` property to handle errors like this!');\r\n    }\r\n    this.scanError.next(error);\r\n  }\r\n\r\n  /**\r\n   * Dispatches the scan event.\r\n   *\r\n   * @param result the scan result.\r\n   */\r\n  private dispatchScanComplete(result: Result): void {\r\n    this.scanComplete.next(result);\r\n  }\r\n\r\n  /**\r\n   * Returns the filtered permission.\r\n   */\r\n  private handlePermissionException(err: DOMException): boolean {\r\n\r\n    // failed to grant permission to video input\r\n    console.error('@zxing/ngx-scanner', 'Error when asking for permission.', err);\r\n\r\n    let permission: boolean;\r\n\r\n    switch (err.name) {\r\n\r\n      // usually caused by not secure origins\r\n      case 'NotSupportedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // could not claim\r\n        permission = null;\r\n        // can't check devices\r\n        this.hasDevices.next(null);\r\n        break;\r\n\r\n      // user denied permission\r\n      case 'NotAllowedError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // claimed and denied permission\r\n        permission = false;\r\n        // this means that input devices exists\r\n        this.hasDevices.next(true);\r\n        break;\r\n\r\n      // the device has no attached input devices\r\n      case 'NotFoundError':\r\n        console.warn('@zxing/ngx-scanner', err.message);\r\n        // no permissions claimed\r\n        permission = null;\r\n        // because there was no devices\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      case 'NotReadableError':\r\n        console.warn('@zxing/ngx-scanner', 'Couldn\\'t read the device(s)\\'s stream, it\\'s probably in use by another app.');\r\n        // no permissions claimed\r\n        permission = null;\r\n        // there are devices, which I couldn't use\r\n        this.hasDevices.next(false);\r\n        // tells the listener about the error\r\n        this.camerasNotFound.next(err);\r\n        break;\r\n\r\n      default:\r\n        console.warn('@zxing/ngx-scanner', 'I was not able to define if I have permissions for camera or not.', err);\r\n        // unknown\r\n        permission = null;\r\n        // this.hasDevices.next(undefined;\r\n        break;\r\n\r\n    }\r\n\r\n    this.setPermission(permission);\r\n\r\n    // tells the listener about the error\r\n    this.permissionResponse.error(err);\r\n\r\n    return permission;\r\n  }\r\n\r\n  /**\r\n   * Returns a valid BarcodeFormat or fails.\r\n   */\r\n  private getBarcodeFormatOrFail(format: string | BarcodeFormat): BarcodeFormat {\r\n    return typeof format === 'string'\r\n      ? BarcodeFormat[format.trim().toUpperCase()]\r\n      : format;\r\n  }\r\n\r\n  /**\r\n   * Return a code reader, create one if non exist\r\n   */\r\n  private getCodeReader(): BrowserMultiFormatContinuousReader {\r\n\r\n    if (!this._codeReader) {\r\n      const options = {\r\n        delayBetweenScanAttempts: this.timeBetweenScans,\r\n        delayBetweenScanSuccess: this.delayBetweenScanSuccess,\r\n      };\r\n      this._codeReader = new BrowserMultiFormatContinuousReader(this.hints, options);\r\n    }\r\n\r\n    return this._codeReader;\r\n  }\r\n\r\n  /**\r\n   * Starts the continuous scanning for the given device.\r\n   *\r\n   * @param deviceId The deviceId from the device.\r\n   */\r\n  private async scanFromDevice(deviceId: string): Promise<void> {\r\n\r\n    const videoElement = this.previewElemRef.nativeElement;\r\n\r\n    const codeReader = this.getCodeReader();\r\n\r\n    const scanStream = await codeReader.scanFromDeviceObservable(deviceId, videoElement);\r\n\r\n    if (!scanStream) {\r\n      throw new Error('Undefined decoding stream, aborting.');\r\n    }\r\n\r\n    const next = (x: ResultAndError) => this._onDecodeResult(x.result, x.error);\r\n    const error = (err: any) => this._onDecodeError(err);\r\n    const complete = () => { };\r\n\r\n    this._scanSubscription = scanStream.subscribe(next, error, complete);\r\n\r\n    if (this._scanSubscription.closed) {\r\n      return;\r\n    }\r\n\r\n    const controls = codeReader.getScannerControls();\r\n    const hasTorchControl = typeof controls.switchTorch !== 'undefined';\r\n\r\n    this.torchCompatible.next(hasTorchControl);\r\n  }\r\n\r\n  /**\r\n   * Handles decode errors.\r\n   */\r\n  private _onDecodeError(err: any) {\r\n    this.dispatchScanError(err);\r\n    // this.reset();\r\n  }\r\n\r\n  /**\r\n   * Handles decode results.\r\n   */\r\n  private _onDecodeResult(result: Result, error: Exception): void {\r\n\r\n    if (result) {\r\n      this.dispatchScanSuccess(result);\r\n    } else {\r\n      this.dispatchScanFailure(error);\r\n    }\r\n\r\n    this.dispatchScanComplete(result);\r\n  }\r\n\r\n  /**\r\n   * Stops the code reader and returns the previous selected device.\r\n   */\r\n  private _reset(): MediaDeviceInfo {\r\n\r\n    if (!this._codeReader) {\r\n      return;\r\n    }\r\n\r\n    // clearing codeReader first to prevent setOptions error appearing in several Chromium versions\r\n    this._codeReader = undefined;\r\n\r\n    const device = this._device;\r\n    // do not set this.device inside this method, it would create a recursive loop\r\n    this.device = undefined;\r\n\r\n\r\n    return device;\r\n  }\r\n\r\n  /**\r\n   * Resets the scanner and emits device change.\r\n   */\r\n  public reset(): void {\r\n    this._reset();\r\n    this.deviceChange.emit(null);\r\n  }\r\n\r\n  /**\r\n   * Sets the current device.\r\n   */\r\n  private async setDevice(device: MediaDeviceInfo): Promise<void> {\r\n\r\n    // instantly stops the scan before changing devices\r\n    this.scanStop();\r\n\r\n    // correctly sets the new (or none) device\r\n    this._device = device || undefined;\r\n\r\n    if (!this._device) {\r\n      // cleans the video because user removed the device\r\n      BrowserCodeReader.cleanVideoSource(this.previewElemRef.nativeElement);\r\n    }\r\n\r\n    // if enabled, starts scanning\r\n    if (this._enabled && device) {\r\n      await this.scanFromDevice(device.deviceId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the permission value and emits the event.\r\n   */\r\n  private setPermission(hasPermission: boolean | null): void {\r\n    this.hasPermission = hasPermission;\r\n    this.permissionResponse.next(hasPermission);\r\n  }\r\n\r\n}\r\n","<video #preview [style.object-fit]=\"previewFitMode\" poster=\"noposter\">\r\n  <p>\r\n    Your browser does not support this feature, please try to upgrade it.\r\n  </p>\r\n  <p>\r\n    Seu navegador não suporta este recurso, por favor tente atualizá-lo.\r\n  </p>\r\n</video>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ZXingScannerComponent } from './zxing-scanner.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ZXingScannerComponent],\r\n  exports: [ZXingScannerComponent],\r\n})\r\nexport class ZXingScannerModule { }\r\n","/*\r\n * Public API Surface of zxing-scanner\r\n */\r\n\r\nexport * from './lib/zxing-scanner.module';\r\nexport * from './lib/zxing-scanner.component';\r\n"],"names":["MAT_LEGACY_DIALOG_DATA","MAT_DIALOG_DATA","AppInfoDialogComponent","constructor","data","hasDevices","hasPermission","_","i0","ɵɵdirectiveInject","_2","selectors","decls","vars","consts","template","AppInfoDialogComponent_Template","rf","ctx","ɵɵelement","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","VERSION","AppInfoComponent","ngVersion","full","stateToEmoji","state","states","undefined","null","true","false","inputs","AppInfoComponent_Template","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate1","FormsModule","MatLegacyButtonModule","MatButtonModule","MatLegacyDialogModule","MatDialogModule","MatLegacyFormFieldModule","MatFormFieldModule","MatIconModule","MatLegacyInputModule","MatInputModule","MatLegacyListModule","MatListModule","MatLegacyMenuModule","MatMenuModule","MatLegacySelectModule","MatSelectModule","MatLegacyTooltipModule","MatTooltipModule","BrowserAnimationsModule","ZXingScannerModule","UI_MODULES","AppUiModule","_3","exports","BarcodeFormat","BehaviorSubject","FormatsDialogComponent","ɵɵlistener","AppComponent_mat_list_option_6_Template_mat_list_option_click_0_listener","ɵɵrestoreView","_r9","ctx_r8","ɵɵnextContext","ɵɵresetView","toggleTorch","ctx_r1","torchEnabled","device_r10","deviceId","label","AppComponent_section_23_Template_button_click_6_listener","_r12","ctx_r11","clearResult","ctx_r3","qrResultString","ɵɵelementContainerStart","ɵɵelementContainerEnd","AppComponent","_dialog","formatsEnabled","CODE_128","DATA_MATRIX","EAN_13","QR_CODE","torchAvailable$","tryHarder","onCamerasFound","devices","availableDevices","Boolean","length","onCodeResult","resultString","onDeviceSelectChange","selected","selectedStr","deviceSelected","device","find","x","deviceCurrent","onDeviceChange","openFormatsDialog","open","afterClosed","subscribe","onHasPermission","has","openInfoDialog","onTorchCompatible","isCompatible","next","toggleTryHarder","i1","MatLegacyDialog","AppComponent_Template","AppComponent_Template_mat_list_option_click_4_listener","ɵɵtemplate","AppComponent_mat_list_option_6_Template","AppComponent_Template_button_click_9_listener","AppComponent_Template_button_click_11_listener","AppComponent_Template_mat_select_valueChange_15_listener","$event","AppComponent_mat_option_18_Template","AppComponent_Template_zxing_scanner_deviceChange_22_listener","AppComponent_Template_zxing_scanner_scanSuccess_22_listener","AppComponent_Template_zxing_scanner_permissionResponse_22_listener","AppComponent_Template_zxing_scanner_camerasFound_22_listener","AppComponent_Template_zxing_scanner_torchCompatible_22_listener","AppComponent_section_23_Template","AppComponent_ng_container_24_Template","AppComponent_ng_container_25_Template","AppComponent_ng_container_26_Template","AppComponent_ng_container_27_Template","ɵɵpipeBind1","_r0","BrowserModule","ServiceWorkerModule","environment","AppModule","bootstrap","register","enabled","production","declarations","imports","formatsAvailable","AZTEC","CODE_39","EAN_8","ITF","PDF_417","RSS_14","formatNames","isEnabled","format_r2","_dialogRef","close","format","onSelectionChange","event","source","selectedOptions","map","value","MatLegacyDialogRef","FormatsDialogComponent_Template","FormatsDialogComponent_Template_mat_selection_list_selectionChange_2_listener","FormatsDialogComponent_mat_list_option_4_Template","FormatsDialogComponent_Template_button_click_6_listener","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","console","error","ChecksumException","FormatException","NotFoundException","BrowserMultiFormatReader","BrowserMultiFormatContinuousReader","getScannerControls","scannerControls","Error","scanFromDeviceObservable","previewEl","_this","_asyncToGenerator","scan$","ctrls","decodeFromVideoDevice","result","errorName","name","message","includes","stop","complete","e","asObservable","EventEmitter","BrowserCodeReader","DecodeHintType","ZXingScannerComponent","codeReader","_codeReader","_ready","_devicePreStart","isAutostarting","warn","isCurrentDevice","setDevice","_device","formats","hints","get","POSSIBLE_FORMATS","input","f","getBarcodeFormatOrFail","set","_hints","setHints","videoConstraints","constraints","controls","streamVideoConstraintsApply","_isAutostarting","autostarting","torch","onOff","getCodeReader","switchTorch","enable","_enabled","reset","releaseAllStreams","scanFromDevice","init","TRY_HARDER","delete","timeBetweenScans","delayBetweenScanSuccess","previewFitMode","autostarted","torchCompatible","scanSuccess","scanFailure","scanError","scanComplete","camerasFound","camerasNotFound","permissionResponse","deviceChange","Map","autofocusEnabled","autostart","hasNavigator","navigator","isMediaDevicesSupported","mediaDevices","askForPermission","setPermission","stream","permission","getAnyVideoDevice","handlePermissionException","terminateStream","getUserMedia","video","getTracks","forEach","t","_this2","initAutostartOff","initAutostartOn","updateVideoInputDevices","_this3","autostartScanner","ngOnDestroy","ngOnInit","scanStop","_scanSubscription","unsubscribe","scanStart","restart","prevDevice","_reset","_this4","listVideoInputDevices","_this5","matcher","test","pop","dispatchScanSuccess","getText","dispatchScanFailure","reason","dispatchScanError","observed","dispatchScanComplete","trim","toUpperCase","options","delayBetweenScanAttempts","_this6","videoElement","previewElemRef","nativeElement","scanStream","_onDecodeResult","_onDecodeError","closed","hasTorchControl","emit","_this7","cleanVideoSource","viewQuery","ZXingScannerComponent_Query","ɵɵstyleProp","CommonModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}